// Code generated by MockGen. DO NOT EDIT.
// Source: uzi_vc_issuer/x509_cert.go
//
// Generated by this command:
//
//	mockgen -destination=uzi_vc_issuer/x509_cert_mock.go -package=uzi_vc_issuer -source=uzi_vc_issuer/x509_cert.go
//

// Package uzi_vc_issuer is a generated GoMock package.
package x509_cert

import (
	rsa "crypto/rsa"
	x509 "crypto/x509"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockChainParser is a mock of ChainParser interface.
type MockChainParser struct {
	ctrl     *gomock.Controller
	recorder *MockChainParserMockRecorder
}

// MockChainParserMockRecorder is the mock recorder for MockChainParser.
type MockChainParserMockRecorder struct {
	mock *MockChainParser
}

// NewMockChainParser creates a new mock instance.
func NewMockChainParser(ctrl *gomock.Controller) *MockChainParser {
	mock := &MockChainParser{ctrl: ctrl}
	mock.recorder = &MockChainParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainParser) EXPECT() *MockChainParserMockRecorder {
	return m.recorder
}

// ParseCertificates mocks base method.
func (m *MockChainParser) ParseCertificates(derChain *[][]byte) (*[]x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseCertificates", derChain)
	ret0, _ := ret[0].(*[]x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseCertificates indicates an expected call of ParseCertificates.
func (mr *MockChainParserMockRecorder) ParseCertificates(derChain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseCertificates", reflect.TypeOf((*MockChainParser)(nil).ParseCertificates), derChain)
}

// ParsePrivateKey mocks base method.
func (m *MockChainParser) ParsePrivateKey(der *[]byte) (*rsa.PrivateKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParsePrivateKey", der)
	ret0, _ := ret[0].(*rsa.PrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParsePrivateKey indicates an expected call of ParsePrivateKey.
func (mr *MockChainParserMockRecorder) ParsePrivateKey(der any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParsePrivateKey", reflect.TypeOf((*MockChainParser)(nil).ParsePrivateKey), der)
}
